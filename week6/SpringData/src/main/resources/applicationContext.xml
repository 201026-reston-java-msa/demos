<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa
    	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<!-- Enable @Transactional --> 
	<!-- Transactional annotation defines the scope of a single database transaction 
		. -->
	<tx:annotation-driven />
	
	
	<jpa:repositories base-package="com.revature.repository" />

	<context:component-scan
		base-package="com.revature.repository" />
	<context:component-scan
		base-package="com.revature.service" />
		
	<!-- DataSource Configuration here (JDBC) -->
	<bean name="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- If you want to use Environment variables, use the example below -->
		<!--<property name="url" value ="#{systemEnvironment['ENV NAME']}"> -->

		<property name="driverClassName"
			value="org.postgresql.Driver" />
		<property name="url"
			value="jdbc:postgresql://localhost:5432/postgres" />
		<property name="username" value="postgres" />
		<property name="password" value="postgres" />
	</bean>

	<!-- Instead of SessionFactory Configuration (Hibernate) -->
	<!-- WE USE ENTITY_MANAGER_FACTORY -->
	<bean name="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		
		<!-- Manually Inject Datasource ^ -->
		<property name="dataSource" ref="dataSource" />

		<!-- Annotation Mapping -->
		<property name="packagesToScan" value="com.revature.model" />
		<!-- jpa properties instead of hibernate properties -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
				<prop key="hibernate.default_schema">public</prop>
			</props>
		</property>
		
		<!--  JPA persistance Provider needed for EntityManagerFactory, specific: Hibernate -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
		</property>
	</bean>

	<!-- bean TransactionManager (this is a bean!) (Hibernate) -->
	<bean name="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<!-- This makes all sessions a transaction -->
		<!-- property Manually inject entityManagerFactory INSTEAD of SessionFactory -->
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
</beans>